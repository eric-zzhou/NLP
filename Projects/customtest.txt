In 1822, Charles Babbage invented the difference machine, the first computer. Since then, a method of instruction, known as a programming language, was created. Computer languages began with physical motion, and later became electrical signals in 1942. The world of programming was forever changed in 1945, when John Von Neumann developed two vital concepts, shared-program system (using complex software to control simple hardware) and conditional control transfer (blocks of code that could be jumped to in any order). This jump-started the world of programming as we know it today (Ferguson).
When I was ten, I discovered a whole new world: the world of programming. Preparing to learn programming as a beginner is like standing at the foot of a mountain, staring up at an insurmountable mass. I didn’t know where or how to start. And that’s where my journey of programming started.
In the 1990s, Java was developed by James Gosling and his team. The new, object-oriented programming language was originally developed for digital devices such as televisions. They were initially planning on modifying C++ but opted for creating a brand-new programming language to improve the memory efficiency (Bhatnagar).
Although the task seemed daunting, I was able to start my journey up with some Java courses. Partway up the mountain that is programming, I realized the arbitrary programming problems we solved in class and at competitions just weren’t interesting for me. I don’t feel very invested in how Farmer John’s cows can exchange gifts based on their ranked wishlists (this is an actual competition question). However, when writing code for a cipher encoder and decoder (inspired by a spy book I read at the time), I was completely engrossed. I was proud of what I made, showed it to my parents, and had fun exchanging secret messages with my brother.
In 1968, the first computer mouse, developed by Dr. Douglas Engelbart and the Stanford Research Institute four years prior, was showcased at the Fall Joint Computer Conference in San Francisco. The idea was for a pointing device that would roll on the desktop control a cursor on the computer display (Markoff).
Fueled by excitement, I scoured ideas for my next project. When I saw a classmate using an autoclicker on a videogame, I thought: autoclickers are programs; I can program; I could totally make one! I quickly opened my laptop and got to work, researching how to use Java to simulate mouse-presses. It was so entertaining to see my project come together bit by bit and I had a blast watching it absolute destroy clicker games. I also may or may not have destroyed my laptop during the process since it was clicking a hundred times a second while I desperately attempted to stop the code. To prevent this from happening again, I learned to create a user-friendly display that can control the click speed and help stop the autoclicker. Through these two projects, I realized I enjoyed writing programs that have more practical products, projects that had application and that I could use.
At the same computer conference, Dr. Engelbart also showed off the keyboard. The keyboard completely revolutionized interactive computing and became an essential part of  computers as we know it today (Markoff).
Expanding on mouse clicks, I learned to simulate keypresses and decided to make a bot for the typing game of my childhood, NitroType. I researched how to use code to take screenshots, interact with computer files, compare images, and use an optical character recognition (OCR) model, which is a model that can identify text from images. My enthusiasm grew with each small success, and I would breeze through work every day to make time for my project. After many iterations and a lot of debugging, I was eventually able to get a bot that reached 218 words per minute with the ability to enter race after race, racking up the game currency. I honestly don’t recall all the issues I had painstakingly pushed through, but I clearly remember jumping out of my chair and sprinting over to my brother after my code successfully ran for the first time.
1959 saw the creation of the development of the first neural networks, which are models designed after the human brain with artificial neuron paths converting various inputs into an output, successfully applied to real-world problems. The models were named ADALINE and MADALINE and were designed to eliminate noise from phone lines (Jaspreet). In 2006, Google sponsored Tesseract, an OCR software, accelerating industry collaboration and catalyzing the integration of neural networks into OCR (OCRology).
In sophomore year of high school, I chanced upon the world of machine learning (ML) through a YouTube tutorial. In junior year, I took Advanced Programming: Topics in Computer Science, where I elevated my knowledge on the fields of artificial intelligence (AI) and ML. For the final project, I decided I wanted to create my OCR system, inspired by my interaction with it for my typing bot. Moving one step-by-step—creating a neural network for image analysis and classification, automatic editing to make letters clearer, splitting letters into separate images after identifying bounds, and running new images through the neural network—I slowly relearned programming for Python (the programming language), built on my understanding of image manipulation, and gained new skills.
The field of natural language processing (NLP), focused on how to program computers to process and analyze large amounts of human language data, began in the 1940s. It was initially developed in hopes of machine translation but that was not possible given the technologies at the time (NLP - overview). In fact, Google translate, which began with a phrase-based statistical model, was launched in 2006; it was later replaced in 2016 with a deep learning model (Louis).
My venture into ML continued with NLP, which I designed an entire independent study curriculum around. After learning the basics, I applied my knowledge on a basic chatbot that can answer an arbitrary set of questions ranging from the average American income to how water pumps work. I also created a simple text summarizer that identifies the most important sentences of an article (just for fun, the top five it identified in this essay are highlighted).
In the future, programs and technology will occupy an even larger chunk of our lives. AI will become commonplace and allow for smart technology. The wide scope and limitless potential of programming will solve some of the world’s largest problems. Genius innovations and technologies will transform our lives. Imagine a world where all cars are self-driving so you could catch up on sleep or finish that Wild personal essay on the way to school. A world where your Amazon package gets delivered in hours by the delivery drone fleet with the help of AI prediction algorithms.
For me, I am currently working on a chatbot that can employ the power of the internet to answer any questions the user might have. Next trimester, I am doing an independent project attempting to predict stock prices using the power of ML. I hope that after college, I will have surmounted the base of the mountain, prepared for the summit.
The mountain seems endless. It is riddled with many trails, Java, Python, JavaScript, C#, C++, etc. and new trails are still being blazed. There are many areas to explore and more heigh to climb. There is always more to learn, and tasks deemed impossible are continually being achieved. There are new paths behind every obstacle, new insight with every bug. Whenever you think you’re stuck, research takes you on an exhilarating ride to an alternate, astonishing solution.
I hope to reach this undiscovered peak still obstructed by clouds, to forge the way up, continue the trail pioneered by the people who came before me.